/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.nearinfinity.honeycomb.mysql;

import java.util.List;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class IndexSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"IndexSchema\",\"namespace\":\"com.nearinfinity.honeycomb.mysql.gen\",\"fields\":[{\"name\":\"columns\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}},{\"name\":\"isUnique\",\"type\":\"boolean\",\"default\":false}]}");
  @Deprecated public java.util.List<java.lang.String> columns;
  @Deprecated public boolean isUnique;

  /**
   * Default constructor.
   */
  public IndexSchema() {}

  /**
   * All-args constructor.
   */
  public IndexSchema(List<String> columns, boolean isUnique) {
    this.columns = columns;
    this.isUnique = isUnique;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return columns;
    case 1: return isUnique;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: columns = (java.util.List<java.lang.String>)value$; break;
    case 1: isUnique = (java.lang.Boolean)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'columns' field.
   */
  public java.util.List<java.lang.String> getColumns() {
    return columns;
  }

  /**
   * Sets the value of the 'columns' field.
   * @param value the value to set.
   */
  public void setColumns(java.util.List<java.lang.String> value) {
    this.columns = value;
  }

  /**
   * Gets the value of the 'isUnique' field.
   */
  public java.lang.Boolean getIsUnique() {
    return isUnique;
  }

  /**
   * Sets the value of the 'isUnique' field.
   * @param value the value to set.
   */
  public void setIsUnique(java.lang.Boolean value) {
    this.isUnique = value;
  }

  /** Creates a new IndexSchema RecordBuilder */
  public static IndexSchema.Builder newBuilder() {
    return new IndexSchema.Builder();
  }

  /** Creates a new IndexSchema RecordBuilder by copying an existing Builder */
  public static IndexSchema.Builder newBuilder(IndexSchema.Builder other) {
    return new IndexSchema.Builder(other);
  }

  /** Creates a new IndexSchema RecordBuilder by copying an existing IndexSchema instance */
  public static IndexSchema.Builder newBuilder(IndexSchema other) {
    return new IndexSchema.Builder(other);
  }

  /**
   * RecordBuilder for IndexSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<IndexSchema>
    implements org.apache.avro.data.RecordBuilder<IndexSchema> {

    private java.util.List<java.lang.String> columns;
    private boolean isUnique;

    /** Creates a new Builder */
    private Builder() {
      super(IndexSchema.SCHEMA$);
    }

    /** Creates a Builder by copying an existing Builder */
    private Builder(IndexSchema.Builder other) {
      super(other);
    }

    /** Creates a Builder by copying an existing IndexSchema instance */
    private Builder(IndexSchema other) {
            super(IndexSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.columns)) {
        this.columns = data().deepCopy(fields()[0].schema(), other.columns);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.isUnique)) {
        this.isUnique = data().deepCopy(fields()[1].schema(), other.isUnique);
        fieldSetFlags()[1] = true;
      }
    }

    /** Gets the value of the 'columns' field */
    public java.util.List<java.lang.String> getColumns() {
      return columns;
    }

    /** Sets the value of the 'columns' field */
    public IndexSchema.Builder setColumns(java.util.List<java.lang.String> value) {
      validate(fields()[0], value);
      this.columns = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /** Checks whether the 'columns' field has been set */
    public boolean hasColumns() {
      return fieldSetFlags()[0];
    }

    /** Clears the value of the 'columns' field */
    public IndexSchema.Builder clearColumns() {
      columns = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'isUnique' field */
    public java.lang.Boolean getIsUnique() {
      return isUnique;
    }

    /** Sets the value of the 'isUnique' field */
    public IndexSchema.Builder setIsUnique(boolean value) {
      validate(fields()[1], value);
      this.isUnique = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /** Checks whether the 'isUnique' field has been set */
    public boolean hasIsUnique() {
      return fieldSetFlags()[1];
    }

    /** Clears the value of the 'isUnique' field */
    public IndexSchema.Builder clearIsUnique() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public IndexSchema build() {
      try {
        IndexSchema record = new IndexSchema();
        record.columns = fieldSetFlags()[0] ? this.columns : (java.util.List<java.lang.String>) defaultValue(fields()[0]);
        record.isUnique = fieldSetFlags()[1] ? this.isUnique : (java.lang.Boolean) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
