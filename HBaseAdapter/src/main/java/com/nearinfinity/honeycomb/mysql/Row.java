/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.nearinfinity.honeycomb.mysql;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Row extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Row\",\"namespace\":\"com.nearinfinity.honeycomb.mysql\",\"fields\":[{\"name\":\"records\",\"type\":{\"type\":\"map\",\"values\":\"bytes\",\"avro.java.string\":\"String\"}}]}");
  @Deprecated public java.util.Map<java.lang.String,java.nio.ByteBuffer> records;

  /**
   * Default constructor.
   */
  public Row() {}

  /**
   * All-args constructor.
   */
  public Row(java.util.Map<java.lang.String,java.nio.ByteBuffer> records) {
    this.records = records;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return records;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: records = (java.util.Map<java.lang.String,java.nio.ByteBuffer>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'records' field.
   */
  public java.util.Map<java.lang.String,java.nio.ByteBuffer> getRecords() {
    return records;
  }

  /**
   * Sets the value of the 'records' field.
   * @param value the value to set.
   */
  public void setRecords(java.util.Map<java.lang.String,java.nio.ByteBuffer> value) {
    this.records = value;
  }

  /** Creates a new Row RecordBuilder */
  public static com.nearinfinity.honeycomb.mysql.Row.Builder newBuilder() {
    return new com.nearinfinity.honeycomb.mysql.Row.Builder();
  }
  
  /** Creates a new Row RecordBuilder by copying an existing Builder */
  public static com.nearinfinity.honeycomb.mysql.Row.Builder newBuilder(com.nearinfinity.honeycomb.mysql.Row.Builder other) {
    return new com.nearinfinity.honeycomb.mysql.Row.Builder(other);
  }
  
  /** Creates a new Row RecordBuilder by copying an existing Row instance */
  public static com.nearinfinity.honeycomb.mysql.Row.Builder newBuilder(com.nearinfinity.honeycomb.mysql.Row other) {
    return new com.nearinfinity.honeycomb.mysql.Row.Builder(other);
  }
  
  /**
   * RecordBuilder for Row instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Row>
    implements org.apache.avro.data.RecordBuilder<Row> {

    private java.util.Map<java.lang.String,java.nio.ByteBuffer> records;

    /** Creates a new Builder */
    private Builder() {
      super(com.nearinfinity.honeycomb.mysql.Row.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.nearinfinity.honeycomb.mysql.Row.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing Row instance */
    private Builder(com.nearinfinity.honeycomb.mysql.Row other) {
            super(com.nearinfinity.honeycomb.mysql.Row.SCHEMA$);
      if (isValidValue(fields()[0], other.records)) {
        this.records = data().deepCopy(fields()[0].schema(), other.records);
        fieldSetFlags()[0] = true;
      }
    }

    /** Gets the value of the 'records' field */
    public java.util.Map<java.lang.String,java.nio.ByteBuffer> getRecords() {
      return records;
    }
    
    /** Sets the value of the 'records' field */
    public com.nearinfinity.honeycomb.mysql.Row.Builder setRecords(java.util.Map<java.lang.String,java.nio.ByteBuffer> value) {
      validate(fields()[0], value);
      this.records = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'records' field has been set */
    public boolean hasRecords() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'records' field */
    public com.nearinfinity.honeycomb.mysql.Row.Builder clearRecords() {
      records = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public Row build() {
      try {
        Row record = new Row();
        record.records = fieldSetFlags()[0] ? this.records : (java.util.Map<java.lang.String,java.nio.ByteBuffer>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
