/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.nearinfinity.honeycomb.mysql;
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class ColumnSchema extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"ColumnSchema\",\"namespace\":\"com.nearinfinity.honeycomb.mysql.gen\",\"fields\":[{\"name\":\"type\",\"type\":{\"type\":\"enum\",\"name\":\"ColumnType\",\"symbols\":[\"STRING\",\"BINARY\",\"ULONG\",\"LONG\",\"DOUBLE\",\"DECIMAL\",\"TIME\",\"DATE\",\"DATETIME\"]}},{\"name\":\"isNullable\",\"type\":\"boolean\",\"default\":true},{\"name\":\"isAutoIncrement\",\"type\":\"boolean\",\"default\":false},{\"name\":\"maxLength\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"scale\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"precision\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  @Deprecated public com.nearinfinity.honeycomb.mysql.gen.ColumnType type;
  @Deprecated public boolean isNullable;
  @Deprecated public boolean isAutoIncrement;
  @Deprecated public java.lang.Integer maxLength;
  @Deprecated public java.lang.Integer scale;
  @Deprecated public java.lang.Integer precision;

  /**
   * Default constructor.
   */
  public ColumnSchema() {}

  /**
   * All-args constructor.
   */
  public ColumnSchema(com.nearinfinity.honeycomb.mysql.gen.ColumnType type, java.lang.Boolean isNullable, java.lang.Boolean isAutoIncrement, java.lang.Integer maxLength, java.lang.Integer scale, java.lang.Integer precision) {
    this.type = type;
    this.isNullable = isNullable;
    this.isAutoIncrement = isAutoIncrement;
    this.maxLength = maxLength;
    this.scale = scale;
    this.precision = precision;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return isNullable;
    case 2: return isAutoIncrement;
    case 3: return maxLength;
    case 4: return scale;
    case 5: return precision;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (com.nearinfinity.honeycomb.mysql.gen.ColumnType)value$; break;
    case 1: isNullable = (java.lang.Boolean)value$; break;
    case 2: isAutoIncrement = (java.lang.Boolean)value$; break;
    case 3: maxLength = (java.lang.Integer)value$; break;
    case 4: scale = (java.lang.Integer)value$; break;
    case 5: precision = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   */
  public com.nearinfinity.honeycomb.mysql.gen.ColumnType getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(com.nearinfinity.honeycomb.mysql.gen.ColumnType value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'isNullable' field.
   */
  public java.lang.Boolean getIsNullable() {
    return isNullable;
  }

  /**
   * Sets the value of the 'isNullable' field.
   * @param value the value to set.
   */
  public void setIsNullable(java.lang.Boolean value) {
    this.isNullable = value;
  }

  /**
   * Gets the value of the 'isAutoIncrement' field.
   */
  public java.lang.Boolean getIsAutoIncrement() {
    return isAutoIncrement;
  }

  /**
   * Sets the value of the 'isAutoIncrement' field.
   * @param value the value to set.
   */
  public void setIsAutoIncrement(java.lang.Boolean value) {
    this.isAutoIncrement = value;
  }

  /**
   * Gets the value of the 'maxLength' field.
   */
  public java.lang.Integer getMaxLength() {
    return maxLength;
  }

  /**
   * Sets the value of the 'maxLength' field.
   * @param value the value to set.
   */
  public void setMaxLength(java.lang.Integer value) {
    this.maxLength = value;
  }

  /**
   * Gets the value of the 'scale' field.
   */
  public java.lang.Integer getScale() {
    return scale;
  }

  /**
   * Sets the value of the 'scale' field.
   * @param value the value to set.
   */
  public void setScale(java.lang.Integer value) {
    this.scale = value;
  }

  /**
   * Gets the value of the 'precision' field.
   */
  public java.lang.Integer getPrecision() {
    return precision;
  }

  /**
   * Sets the value of the 'precision' field.
   * @param value the value to set.
   */
  public void setPrecision(java.lang.Integer value) {
    this.precision = value;
  }

  /** Creates a new ColumnSchema RecordBuilder */
  public static ColumnSchema.Builder newBuilder() {
    return new ColumnSchema.Builder();
  }
  
  /** Creates a new ColumnSchema RecordBuilder by copying an existing Builder */
  public static ColumnSchema.Builder newBuilder(ColumnSchema.Builder other) {
    return new ColumnSchema.Builder(other);
  }
  
  /** Creates a new ColumnSchema RecordBuilder by copying an existing ColumnSchema instance */
  public static ColumnSchema.Builder newBuilder(ColumnSchema other) {
    return new ColumnSchema.Builder(other);
  }
  
  /**
   * RecordBuilder for ColumnSchema instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<ColumnSchema>
    implements org.apache.avro.data.RecordBuilder<ColumnSchema> {

    private com.nearinfinity.honeycomb.mysql.gen.ColumnType type;
    private boolean isNullable;
    private boolean isAutoIncrement;
    private java.lang.Integer maxLength;
    private java.lang.Integer scale;
    private java.lang.Integer precision;

    /** Creates a new Builder */
    private Builder() {
      super(ColumnSchema.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(ColumnSchema.Builder other) {
      super(other);
    }
    
    /** Creates a Builder by copying an existing ColumnSchema instance */
    private Builder(ColumnSchema other) {
            super(ColumnSchema.SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.isNullable)) {
        this.isNullable = data().deepCopy(fields()[1].schema(), other.isNullable);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isAutoIncrement)) {
        this.isAutoIncrement = data().deepCopy(fields()[2].schema(), other.isAutoIncrement);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.maxLength)) {
        this.maxLength = data().deepCopy(fields()[3].schema(), other.maxLength);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.scale)) {
        this.scale = data().deepCopy(fields()[4].schema(), other.scale);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.precision)) {
        this.precision = data().deepCopy(fields()[5].schema(), other.precision);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'type' field */
    public com.nearinfinity.honeycomb.mysql.gen.ColumnType getType() {
      return type;
    }
    
    /** Sets the value of the 'type' field */
    public ColumnSchema.Builder setType(com.nearinfinity.honeycomb.mysql.gen.ColumnType value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'type' field has been set */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'type' field */
    public ColumnSchema.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'isNullable' field */
    public java.lang.Boolean getIsNullable() {
      return isNullable;
    }
    
    /** Sets the value of the 'isNullable' field */
    public ColumnSchema.Builder setIsNullable(boolean value) {
      validate(fields()[1], value);
      this.isNullable = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'isNullable' field has been set */
    public boolean hasIsNullable() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'isNullable' field */
    public ColumnSchema.Builder clearIsNullable() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'isAutoIncrement' field */
    public java.lang.Boolean getIsAutoIncrement() {
      return isAutoIncrement;
    }
    
    /** Sets the value of the 'isAutoIncrement' field */
    public ColumnSchema.Builder setIsAutoIncrement(boolean value) {
      validate(fields()[2], value);
      this.isAutoIncrement = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'isAutoIncrement' field has been set */
    public boolean hasIsAutoIncrement() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'isAutoIncrement' field */
    public ColumnSchema.Builder clearIsAutoIncrement() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'maxLength' field */
    public java.lang.Integer getMaxLength() {
      return maxLength;
    }
    
    /** Sets the value of the 'maxLength' field */
    public ColumnSchema.Builder setMaxLength(java.lang.Integer value) {
      validate(fields()[3], value);
      this.maxLength = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'maxLength' field has been set */
    public boolean hasMaxLength() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'maxLength' field */
    public ColumnSchema.Builder clearMaxLength() {
      maxLength = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'scale' field */
    public java.lang.Integer getScale() {
      return scale;
    }
    
    /** Sets the value of the 'scale' field */
    public ColumnSchema.Builder setScale(java.lang.Integer value) {
      validate(fields()[4], value);
      this.scale = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'scale' field has been set */
    public boolean hasScale() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'scale' field */
    public ColumnSchema.Builder clearScale() {
      scale = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'precision' field */
    public java.lang.Integer getPrecision() {
      return precision;
    }
    
    /** Sets the value of the 'precision' field */
    public ColumnSchema.Builder setPrecision(java.lang.Integer value) {
      validate(fields()[5], value);
      this.precision = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'precision' field has been set */
    public boolean hasPrecision() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'precision' field */
    public ColumnSchema.Builder clearPrecision() {
      precision = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public ColumnSchema build() {
      try {
        ColumnSchema record = new ColumnSchema();
        record.type = fieldSetFlags()[0] ? this.type : (com.nearinfinity.honeycomb.mysql.gen.ColumnType) defaultValue(fields()[0]);
        record.isNullable = fieldSetFlags()[1] ? this.isNullable : (java.lang.Boolean) defaultValue(fields()[1]);
        record.isAutoIncrement = fieldSetFlags()[2] ? this.isAutoIncrement : (java.lang.Boolean) defaultValue(fields()[2]);
        record.maxLength = fieldSetFlags()[3] ? this.maxLength : (java.lang.Integer) defaultValue(fields()[3]);
        record.scale = fieldSetFlags()[4] ? this.scale : (java.lang.Integer) defaultValue(fields()[4]);
        record.precision = fieldSetFlags()[5] ? this.precision : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
