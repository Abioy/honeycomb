// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Engine.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::com::nearinfinity::hbase_engine;

class EngineHandler : virtual public EngineIf {
 public:
  EngineHandler() {
    // Your initialization goes here
  }

  void open() {
    // Your implementation goes here
    printf("open\n");
  }

  bool createTable(const std::string& tableName, const std::vector<std::string> & columnFamilies) {
    // Your implementation goes here
    printf("createTable\n");
  }

  bool addColumnFamily(const std::string& tableName, const std::string& familyName) {
    // Your implementation goes here
    printf("addColumnFamily\n");
  }

  bool removeColumnFamily(const std::string& tableName, const std::string& familyName) {
    // Your implementation goes here
    printf("removeColumnFamily\n");
  }

  void addData(const std::string& tableName, const std::map<std::string, std::map<std::string, std::map<std::string, std::string> > > & data) {
    // Your implementation goes here
    printf("addData\n");
  }

  bool removeTable(const std::string& tableName) {
    // Your implementation goes here
    printf("removeTable\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<EngineHandler> handler(new EngineHandler());
  shared_ptr<TProcessor> processor(new EngineProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

